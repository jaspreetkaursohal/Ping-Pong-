#Pong version 2
#Implements a general game template for games with animation
#You must use this template for all your graphical lab assignments
# and you are only allowed to inlclude additional modules that are part of
# the Python Standard Library; no other modules are allowed

import pygame


# User-defined classes

class Game:
   # An object in this class represents a complete game.

   def __init__(self, surface):
      # Initialize a Game.
      # - self is the Game to initialize
      # - surface is the display window surface object

      # === objects that are part of every game that we will discuss
      self.surface = surface
      self.bg_color = pygame.Color('black')
      
      self.FPS = 60
      self.game_Clock = pygame.time.Clock()
      #game is still active
      self.close_clicked = False
      self.continue_game = True
      #initializing scores to 0
      self.left_score=0
      self.right_score=0 
      pygame.key.set_repeat(20, 20)
      
      
      # === game specific objects
      #initializing the attributes the paddles and ball are going to have
      self.right_paddle=pygame.Rect(400,200,10, 40)
      self.left_paddle=pygame.Rect(100,200,10, 40)
      self.ball=Ball('white', 5, [250,200], [4,1], self.surface)
      self.max_frames = 150
      self.frame_counter = 0  

   def play(self):
      # Play the game until the player presses the close box.
      # - self is the Game that should be continued or not.

      while not self.close_clicked:  # until player clicks close box
         # play frame
         self.handle_events()
         self.draw()            
         if self.continue_game:
            self.update()
            self.decide_continue()
         self.game_Clock.tick(self.FPS) # run at most with FPS Frames Per Second 

   def handle_events(self):
      # Handle each user event by changing the game state appropriately.
      # - self is the Game whose events will be handled

      events = pygame.event.get()
      for event in events:
         if event.type == pygame.QUIT: #checking whether the window is being closed
            self.close_clicked = True  
         if event.type==pygame.KEYDOWN and self.continue_game==True:
            self.key_down(event)
   def key_down(self,event):
      keys=pygame.key.get_pressed()
      if keys[pygame.K_a] and self.left_paddle.top<=360:
         self.left_paddle.top=self.left_paddle.top+7
      if keys[pygame.K_q] and self.left_paddle.top>=0:
         self.left_paddle.top=self.left_paddle.top-7
      if keys[pygame.K_l] and self.right_paddle.top<=360:
         self.right_paddle.top=self.right_paddle.top+7
      if keys[pygame.K_p] and self.right_paddle.top>=0:
         self.right_paddle.top=self.right_paddle.top-7        
         
              
   def draw(self):
      # Draw all game objects.
      # - self is the Game to draw
      
      self.surface.fill(self.bg_color) # clear the display surface first
      #drawing the paddles, ball and the scoreboard
      pygame.draw.rect(self.surface,(255,255,255), self.left_paddle)
      pygame.draw.rect(self.surface,(255,255,255), self.right_paddle)
      self.ball.draw()
      self.draw_score()
      pygame.display.update() # make the updated surface appear on the display
      
   def update(self):
      # Update the game objects for the next frame.
      # - self is the Game to update
      
      collide = self.ball.move()
      #checking if the ball collided with the right edge and then proceeding to increase the left score
      if collide=='with right edge':
         self.left_score = self.left_score+1
      #checking if the ball collided with the left edge and then proceeding to increase the right score   
      elif collide == 'with left edge':
         self.right_score=self.right_score+1
         
      # calling the method which checks whether the ball collided with the paddles
      self.ball.collision_with_paddles(self.left_paddle,self.right_paddle)
 
      self.frame_counter = self.frame_counter + 1 #FRAME NOT NEEDED YET
      size = self.surface.get_size() #size is a tuple (width, height)     
      

   def decide_continue(self):
      
      # Check and remember if the game should continue
      # - self is the Game to check
      if self.left_score==11 or self.right_score==11:
         self.continue_game=False
      
   def draw_score(self):      
      #step 1 - color
      fg_color=pygame.Color('white')
      #step 2 - create Font object
      font = pygame.font.SysFont('',80) #if you leave the font area as a normal blank string, it takes the default system font
           
      #step 3 - render the font object
      l_score= self.left_score
      r_score= self.right_score
      l_text_box = font.render(str(l_score), True, fg_color, self.bg_color)
      r_text_box=font.render(str(r_score), True, fg_color, self.bg_color)
      #Step 4 - compute the location
      l_location = [0,0]
      r_location = [self.surface.get_width()-r_text_box.get_width(),0]
      #step 5 - blit
      self.surface.blit(l_text_box, l_location)
      self.surface.blit(r_text_box, r_location)

class Ball:
   # An object in this class represents a Ball that moves 
   
   def __init__(self, ball_color, ball_radius, ball_center, ball_velocity, surface):
      # Initialize a Ball.
      # - self is the Ball to initialize
      # - color is the pygame.Color of the Ball
      # - center is a list containing the x and y int
      #   coords of the center of the Ball
      # - radius is the int pixel radius of the Ball
      # - velocity is a list containing the x and y components
      # - surface is the window's pygame.Surface object

      self.b_color = pygame.Color(ball_color)
      self.radius = ball_radius
      self.center = ball_center
      self.velocity = ball_velocity
      self.surface = surface
      
   def move(self):
      # Change the location of the Ball by adding the corresponding 
      # speed values to the x and y coordinate of its center
      # - self is the Ball
      size = self.surface.get_size() #size contains height and width
      collision= ''
      self.center[0] = (self.center[0] + self.velocity[0])
      self.center[1] = (self.center[1] + self.velocity[1])
      if self.center[0]  >= size[0] - self.radius:#checking collision of ball with right edge 
         self.velocity[0]=-self.velocity[0]
         collision = 'with right edge'
      if self.center[1] >= size[1]-self.radius: #checking collision of ball with bottom edge
         self.velocity[1]=-self.velocity[1]
      if self.center[0] < self.radius: # checking collision of ball with left edge
         self.velocity[0]=-self.velocity[0]
         collision='with left edge'
      if self.center[1] < self.radius: #checking collision of ball with top edge
         self.velocity[1]=-self.velocity[1]
      return collision  
         

   
   def draw(self):
      # Draw the Ball on the surface
      # - self is the Ball
      pygame.draw.circle(self.surface, self.b_color, self.center, self.radius)
   def collision_with_paddles(self, left_paddle, right_paddle):
      #checking whether the ball collided with the left paddle's inner edge
      if left_paddle.collidepoint(self.center[0], self.center[1]):
         if self.velocity[0]<0:
            self.velocity[0]=-self.velocity[0]
      #checking whether the ball collided with the right paddle's inner edge   
      if right_paddle.collidepoint(self.center[0], self.center[1]):
         if self.velocity[0]>0:
            
   
            self.velocity[0]=-self.velocity[0]          
      

# User-defined functions

def main():
   # initialize all pygame modules (some need initialization)
   pygame.init()
   # create a pygame display window
   size=(500,400)
   pygame.display.set_mode(size)
   # set the title of the display window
   pygame.display.set_caption('Pong')   
   # get the display surface
   w_surface = pygame.display.get_surface() 
   # create a game object
   game = Game(w_surface)

   # start the main game loop by calling the play method on the game object
   game.play() 
   # quit pygame and clean up the pygame window
   pygame.quit() 




main()
